#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;

uniform vec3 viewPos;
uniform sampler2D diffuse_texture;
uniform sampler2D specular_texture;
uniform sampler2D emission_texture;

struct Light {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

#define MAX_POINT_LIGHTS 10  
uniform Light lights[MAX_POINT_LIGHTS];
uniform int numLights;

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
}; 
  
uniform Material material;

vec3 CalcPointLight(Light light, vec3 norm, vec3 aPos, vec3 viewDir) {
  // ambient
  // change so only one ambient used in main method?
  // or divide by number of lights?
  // or leave to user to deal with
  vec3 ambient = light.ambient * vec3(texture(diffuse_texture, aTexCoord)) * 1.0/float(numLights);

  // diffuse
  vec3 lightDir = normalize(light.position - aPos);  
  float diff = max(dot(norm, lightDir), 0.0);
  vec3 diffuse = light.diffuse * diff * vec3(texture(diffuse_texture, aTexCoord));
  
  // specular 
  vec3 reflectDir = reflect(-lightDir, norm);  
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  vec3 specular = light.specular * spec * vec3(texture(specular_texture, aTexCoord));
 
  vec3 result = ambient + diffuse + specular;
  return result;
}

void main() {
  vec3 norm = normalize(aNormal);
  vec3 viewDir = normalize(viewPos - aPos);

  vec3 result = vec3(0.0);
  for(int i = 0; i < numLights; i++)
    result += CalcPointLight(lights[i], norm, aPos, viewDir); 

  vec3 emission = vec3(texture(emission_texture, aTexCoord));

  result = result + emission;
  fragColor = vec4(result, 1.0);
}